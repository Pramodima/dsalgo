package BinaryTree;

public class LevelOrderTraversal {
    private BinaryTreeNode<Integer> createTree(){
        BinaryTreeNode<Integer> bt=new BinaryTreeNode<>(1);
        BinaryTreeNode<Integer> l=new BinaryTreeNode<>(2);
        BinaryTreeNode<Integer> r=new BinaryTreeNode<>(3);
        bt.left=l;
        bt.right=r;
        BinaryTreeNode<Integer> ll=new BinaryTreeNode<>(4);
        BinaryTreeNode<Integer> lr=new BinaryTreeNode<>(5);
        l.left=ll;
        l.right=lr;
        BinaryTreeNode<Integer> rl=new BinaryTreeNode<>(6);
        BinaryTreeNode<Integer> rr=new BinaryTreeNode<>(7);
        r.left=rl;
        r.right=rr;
        return bt;
    }
    private int heightOfATree(BinaryTreeNode bt) {
        if (bt == null) {
            return 0;
        }
        else {
            int lheight = heightOfATree(bt.left);
            int rheight = heightOfATree(bt.right);
            if(lheight>rheight){
                return lheight+1;
            }
            else return rheight+1;
        }
    }
private void levelOrderByRecurssion(){
    LevelOrderTraversal lt=new LevelOrderTraversal();
    BinaryTreeNode<Integer> root = lt.createTree();
    int height = lt.heightOfATree(root);
    for(int i=1;i<=height;i++){
    lt.levelOrder(root,i);
    }
}
private void levelOrder(BinaryTreeNode root,int level){
        if(root==null){
            return;
        }
        if(level==1){
            System.out.println(root.data);
        }
        else if(level>1){
            levelOrder(root.left,level-1);
            levelOrder(root.right,level-1);
        }
}
    public static void main(String[] args) {
        LevelOrderTraversal lt=new LevelOrderTraversal();

        BinaryTreeNode<Integer> root = lt.createTree();
        System.out.println( "height   "+lt.heightOfATree(root));
        lt.levelOrderByRecurssion();
    }
}
